@page "/Cadastros/Pessoas/Lista"
@using web.Components.Layout
@layout MainLayout
@inject IPessoa pessoaService
@inject MudBlazor.ISnackbar snackBar
@inject IPopoverService PopoverService
@inject NavigationManager Navigation
@inject HelperConfiguracoes HConfiguracoes
<PageTitle>OTMZ</PageTitle>

<AuthorizeView>
    <Authorized>

         <MudGrid style="position: relative;  padding: 50px;">
                <MudItem xs="12">
                    <MudPaper Class="d-flex align-items-center justify-content-between"
                              Style="width: 100%; height: 100%; background-color: transparent; box-shadow: none;">
                        <div class="d-flex align-items-center">
                            <MudIcon Icon="@Icons.Material.Filled.People" Color="Color.Warning" Size="Size.Large" />
                            <MudText Class="ml-2" Typo="Typo.h4" Color="@Color.Warning">Lista de @HConfiguracoes.TipoMorador</MudText>
                        </div>
                    </MudPaper>
                </MudItem>
            </MudGrid>
            <MudDivider/>


        <MudTabs Elevation="1" Rounded="true" Style="background-color: transparent;padding: 30px;">
            <MudTabPanel Text="@HConfiguracoes.TipoMorador" ToolTip="Lista de registros">

                <MudGrid Spacing="2">
                    <MudItem xs="12" md="12">
                        <MudPaper Class="d-flex align-items-center" Style="padding: 8px;">                       

                            <MudTextField T="string" Placeholder="Informe o nome ou CPF ou Telefone principal" Label="Buscar" Typo="Typo.input"
                                          Style="margin-left: 16px; margin-right: 16px;" @bind-Value="searchString"></MudTextField>

                            <MudButton Variant="Variant.Filled" Color="Color.Transparent"
                                       StartIcon="@Icons.Material.Filled.Search" @onclick="Pesquisar"
                                       Style="border-radius: 0%; width: 150px; height: 35px;">
                                Consultar
                            </MudButton>
                            <MudButton Color="Color.Warning" Variant="Variant.Filled" Class="ml-12"
                                       Style="border-radius: 0%; width: 150px; height: 35px;" OnClick="NovoRegistro">
                                Novo Registro
                            </MudButton>
                            <MudButton Color="Color.Error" Variant="Variant.Filled" Class="ml-12"
                                       StartIcon="@Icons.Material.Filled.ArrowBack"
                                       Style="border-radius: 0%; width: 150px; height: 35px;" OnClick="Voltar">

                            </MudButton>
                        </MudPaper>
                    </MudItem>
                </MudGrid>

                <MudTable Items="listapessoas" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="Search" @bind-SelectedItem="selectedItem1">
                    <!-- <ToolBarContent>
                        <MudText Typo="Typo.h6">Lista de Animais</MudText>
                        <MudSpacer />
                       <MudTextField @bind-Value="searchString" Placeholder="Procurar pets..." Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </ToolBarContent>-->

                    <HeaderContent>
                        <MudTh>Código</MudTh>
                        <MudTh>Nome</MudTh>
                        <MudTh>CPF</MudTh>
                        <MudTh>Telefone</MudTh>
                        <MudTh>Data Nascimento</MudTh>
                    </HeaderContent>

                    <RowTemplate Context="_context_pessoa">
                        <MudTd DataLabel="Código">@_context_pessoa.Id</MudTd>
                        <MudTd DataLabel="Nome">@_context_pessoa.Nome</MudTd>
                        <MudTd DataLabel="CPF">@_context_pessoa.CpfPessoa</MudTd>                        
                        <MudTd DataLabel="Telefone">@_context_pessoa.TelefonePrincipal</MudTd>
                        <MudTd DataLabel="Data Nascimento">
                            @if (DateTime.TryParse(_context_pessoa.DataNascimento, out var dataNascimento))
                            {
                                @dataNascimento.ToString("dd/MM/yyyy")
                            }
                            else
                            {
                                <span>Data inválida</span>
                            }
                        </MudTd>

                        <MudTd>
                            <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit"
                                       OnClick="@(() => EditarMorador(_context_pessoa))">
                            </MudButton>
                            
                                <MudButton Disabled="_isHabilita" Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Pets"
                                           OnClick="@(() => EditarMorador(_context_pessoa))">
                                </MudButton>
                                <MudButton Disabled="_isHabilita" Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Difference"
                                           OnClick="@(() => EditarMorador(_context_pessoa))">
                                </MudButton>
                                <MudButton Disabled="_isHabilita" Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.FitnessCenter"
                                           OnClick="@(() => EditarMorador(_context_pessoa))">
                                </MudButton>
                            
                        </MudTd>
                    </RowTemplate>

                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudTabPanel>

            <MudTabPanel Text="Pendente" ToolTip="Pendente de aprovação">
                <br /> Fotos 
            </MudTabPanel>

        </MudTabs>

    </Authorized>

    <NotAuthorized>
        <MudText>Você não está autorizado a visualizar esta página.</MudText>
    </NotAuthorized>
</AuthorizeView>

@code {
    private HashSet<string> options { get; set; } = new HashSet<string>();
    private string[] Tipobusca = { "Ativo", "Inativo", "Todos" };
    private string? tipoMorador;
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private bool _isHabilita = true;

    private string searchString = string.Empty; // Usaremos apenas uma string de busca

    private PessoaModel selectedItem1 = null;
    private IEnumerable<PessoaModel> listapessoas = new List<PessoaModel>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetPessoas();
            if (HConfiguracoes.TipoMorador == "Permanentes")
            {
                _isHabilita = false;
            }

            if (HConfiguracoes.TipoMorador == "Pessoas")
            {
                _isHabilita = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        
       
    }

    private async Task<IEnumerable<PessoaModel>> GetPessoas()
    {
        listapessoas = await pessoaService.GetTipoMorador(HConfiguracoes.TipoMorador);
        return listapessoas;
    }

    private bool Search(PessoaModel pessoa)
    {
        if (string.IsNullOrWhiteSpace(searchString) && options.Count == 0)
            return true; // Se não houver uma string de busca ou opções selecionadas, mostre todos os itens

        // Verifique se o nome do pet ou tipo do animal contém a string de busca
        bool matchesSearchString = string.IsNullOrWhiteSpace(searchString) ||

                                   (pessoa.Nome?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||

                                   (pessoa.CpfPessoa?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||

                                   (pessoa.TelefonePrincipal?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false);

        // Verifique se o tipo do animal está entre as opções selecionadas
        bool matchesOptions = options.Count == 0 || options.Contains(pessoa.CpfPessoa);

        return matchesSearchString && matchesOptions;
    }

    private void Pesquisar()
    {
        // Função que pode ser usada para alguma lógica adicional de pesquisa
        StateHasChanged();
    }
    private async Task NovoRegistro()
    {
       
        Navigation.NavigateTo($"/Cadastros/Pessoas/Pessoa");
    }
    private async Task Voltar()
    {
        Navigation.NavigateTo("/cadastros/cadastros/");
    }
    void EditarMorador(PessoaModel pessoa)
    {
        
        Navigation.NavigateTo($"/Cadastros/Pessoas/Pessoa?id={pessoa.Id}");
        HConfiguracoes.TipoRegistro = true;
    }
}

