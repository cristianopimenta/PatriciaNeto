@page "/Cadastros/Imoveis/ListaImovelVertical"
@using Microsoft.EntityFrameworkCore.Metadata
@using MudBlazor
@using web.Components.Layout
@layout MainLayout

@inject IImoveis imovelService
@inject MudBlazor.ISnackbar snackBar
@inject IPopoverService PopoverService
@inject NavigationManager Navigation

<PageTitle>OTMZ</PageTitle>

<AuthorizeView>
    <Authorized>

        <MudGrid style="position: relative; padding: 50px;">
            <MudItem xs="12">
                <MudPaper Class="d-flex align-items-center justify-content-between"
                Style="width: 100%; height: 100%; background-color: transparent; box-shadow: none;">
                    <div class="d-flex align-items-center">
                        <MudIcon Icon="@Icons.Material.Filled.House" Color="Color.Warning" Size="Size.Large" />
                        <MudText Class="ml-2" Typo="Typo.h4" Color="@Color.Warning">Lista de Imóveis Vertical</MudText>
                    </div>
                </MudPaper>
            </MudItem>
        </MudGrid>

        <MudTabs Elevation="1" Rounded="true" Style="background-color: transparent;padding: 30px;">
            <MudTabPanel Text="Imoveis" ToolTip="Cadastro de Imoveis">
                <MudGrid Spacing="2" JustifyContent="SpaceBetween">
                    <MudItem xs="12" sm="6" md="8">
                        <MudPaper Class="d-flex flex-column" Style="padding: 8px;">
                            <MudForm @ref="_form" OnValidSubmit="Consultar">
                                <MudGrid Spacing="2">

                                    <MudItem xs="6" sm="6">
                                        <MudTextField T="string" Placeholder="Informe a Torre ou sala ou apartamento ou andar" Label="Buscar"
                                        Typo="Typo.input"
                                        Style="margin: 16px 0;"
                                        @bind-Value="searchString" />
                                    </MudItem>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                    StartIcon="@Icons.Material.Filled.Search" @onclick="Pesquisar"
                                    Style="margin: 8px; width: 150px; height: 35px;">
                                        Consultar
                                    </MudButton>
                                    <MudButton Color="Color.Warning" Variant="Variant.Filled"
                                    Style="margin: 8px; width: 150px; height: 35px;" OnClick="NovoRegistro">
                                        Novo Registro
                                    </MudButton>
                                    <MudButton Color="Color.Error" Variant="Variant.Filled"
                                    Style="margin: 8px; width: 150px; height: 35px;" OnClick="Voltar">
                                        Voltar
                                    </MudButton>
                                </MudGrid>
                            </MudForm>
                        </MudPaper>
                    </MudItem>
                </MudGrid>



                <MudTable Items="listaimoveis" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped"
                Filter="Search" @bind-SelectedItem="selectedItem1">

                    <HeaderContent>
                        <MudTh>Código</MudTh>
                        <MudTh>Logradouro</MudTh>
                        <MudTh>Torre</MudTh>
                        <MudTh>Sala</MudTh>
                        <MudTh>Andar</MudTh>
                        <MudTh>Data de Cadastro</MudTh>
                        <MudTh>Ações</MudTh>
                    </HeaderContent>

                    <RowTemplate Context="imoveis">
                        <MudTd DataLabel="Código">@imoveis.Id</MudTd>
                        <MudTd DataLabel="Logradouro">@imoveis.Lograouro</MudTd>
                        <MudTd DataLabel="Torre">@imoveis.Torre</MudTd>
                        <MudTd DataLabel="Sala">@imoveis.Sala</MudTd>
                        <MudTd DataLabel="Andar">@imoveis.Andar</MudTd>
                        <MudTd DataLabel="Data de Cadastro">@imoveis.DataCadastro</MudTd>

                        <MudTd DataLabel="Ações">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@( () => EditarImovel(imoveis) )" /> <!-- Fixed lambda expression -->
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@( () => ExcluirImovel(imoveis.Id) )" /> <!-- Fixed lambda expression -->
                        </MudTd>
                    </RowTemplate>

                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudTabPanel>

            <MudTabPanel Text="Foto Imóvel" ToolTip="Registre a foto do imovel">
                <br /> Fotos do imovel
            </MudTabPanel>
        </MudTabs>
    </Authorized>

    <NotAuthorized>
        <MudText>Você não está autorizado a visualizar esta página.</MudText>
    </NotAuthorized>
</AuthorizeView>

@code {
    private HashSet<string> options { get; set; } = new HashSet<string>();
    private string[] Tipobusca = { "Torre", "Sala", "Andar" };
    private MudForm _form;
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string quadra = string.Empty; // Corrected variable name from sala to quadra
    private string lote = string.Empty; // Corrected variable name from andar to lote

    private string searchString = string.Empty;

    private ImovelModel selectedItem1 = null;
    private IEnumerable<ImovelModel> listaimoveis = new List<ImovelModel>();
    private ImovelModel imoveis = new ImovelModel();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetImoveis();
            Pesquisar();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task<IEnumerable<ImovelModel>> GetImoveis()
    {
        listaimoveis = await imovelService.GetRegistro();
        return listaimoveis;
    }

    private bool Search(ImovelModel imovel)
    {
        if (string.IsNullOrWhiteSpace(searchString) &&
            string.IsNullOrWhiteSpace(quadra) &&
            string.IsNullOrWhiteSpace(lote) &&
            options.Count == 0)
            return true;

        bool matchesSearchString = !string.IsNullOrWhiteSpace(searchString) &&
                                   ((imovel.Torre?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                    (imovel.Sala?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                    (imovel.Andar?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false));

        return matchesSearchString;
    }



    private void Pesquisar()
    {
        StateHasChanged();
    }

    private async Task NovoRegistro()
    {
        Navigation.NavigateTo("/Cadastros/Imoveis/RegistroImovelVertical");
    }

    private async Task Voltar()
    {
        Navigation.NavigateTo("/Cadastros/cadastros");
    }

    private async Task EditarImovel(ImovelModel imovel)
    {
        Navigation.NavigateTo($"/Cadastros/Imoveis/RegistroImovelVertical/{imovel.Id}");
    }

    private async Task ExcluirImovel(int id)
    {
        await imovelService.DeleteRegistro(id);
        snackBar.Add("Imóvel excluído com sucesso!", Severity.Success);
        await GetImoveis();
        StateHasChanged();
    }
}
