@page "/Cadastros/Empresas/Lista"
@using web.Components.Layout
@layout MainLayout

@inject IEmpresa empresaService
@inject MudBlazor.ISnackbar snackBar
@inject IPopoverService PopoverService
@inject NavigationManager Navigation
@inject MudBlazor.ISnackbar mensagem

@attribute [Authorize]

<PageTitle>OTMZ</PageTitle>

<AuthorizeView>
    <Authorized>

        <MudGrid style="position: relative;  padding: 50px;">
            <MudItem xs="12">
                <MudPaper Class="d-flex align-items-center justify-content-between"
                          Style="width: 100%; height: 100%; background-color: transparent; box-shadow: none;">
                    <div class="d-flex align-items-center">
                        <MudIcon Icon="@Icons.Material.Filled.HomeWork" Color="Color.Warning" Size="Size.Large" />
                        <MudText Class="ml-2" Typo="Typo.h4" Color="@Color.Warning">Lista de Condomínio</MudText>
                    </div>

                </MudPaper>
            </MudItem>

        </MudGrid>


        <MudDivider />

        <MudTabs Elevation="1" Rounded="true" Style="background-color: transparent;padding: 30px;">
            <MudTabPanel Text="Condomínio" ToolTip="Consulta condomínio">

                <MudGrid Spacing="2">
                    <MudItem xs="12" md="12">
                        <MudPaper Class="d-flex align-items-center" Style="padding: 8px;">                            

                            <MudTextField T="string" Placeholder="Informe Razão social ou Nome fantasia ou CNPJ" Label="Buscar" Typo="Typo.input"
                                          Style="margin-left: 16px; margin-right: 16px;" @bind-Value="searchString"></MudTextField>

                            <MudButton Variant="Variant.Filled" Color="Color.Transparent"
                                       StartIcon="@Icons.Material.Filled.Search" @onclick="Pesquisar"
                                       Style="border-radius: 0%; width: 150px; height: 35px;">
                                Consultar
                            </MudButton>
                            <MudButton Color="Color.Warning" Variant="Variant.Filled" Class="ml-12"
                                       Style="border-radius: 0%; width: 150px; height: 35px;" OnClick="NovoRegistro">
                                Novo Registro
                            </MudButton>
                            <MudButton Color="Color.Error" Variant="Variant.Filled" Class="ml-12"
                                       StartIcon="@Icons.Material.Filled.ArrowBack"
                                       Style="border-radius: 0%; width: 150px; height: 35px;" OnClick="Voltar">

                            </MudButton>
                        </MudPaper>
                    </MudItem>
                </MudGrid>

                <MudTable Items="listaempresas" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="Search" @bind-SelectedItem="selectedItem1">
                    <!-- <ToolBarContent>
                    <MudText Typo="Typo.h6">Lista de Animais</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString" Placeholder="Procurar pets..." Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>-->

                    <HeaderContent>
                        <MudTh>Código</MudTh>
                        <MudTh>Razão Social</MudTh>
                        <MudTh>CNPJ</MudTh>

                    </HeaderContent>

                    <RowTemplate Context="context_empresa">
                        <MudTd DataLabel="Código">@context_empresa.Id</MudTd>
                        <MudTd DataLabel="Razão Social">@context_empresa.RazaoSocial</MudTd>
                        <MudTd DataLabel="CNPJ">@context_empresa.CNPJ</MudTd>
                        <MudTd DataLabel="Ações">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => Editar(context_empresa)" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="() => Excluir(context_empresa.Id)" />
                        </MudTd>


                    </RowTemplate>

                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudTabPanel>

            <MudTabPanel Text="Outros" ToolTip="Outros">
                <br /> Outros Dados
            </MudTabPanel>

        </MudTabs>

    </Authorized>

    <NotAuthorized>
        <MudText>Você não está autorizado a visualizar esta página.</MudText>
    </NotAuthorized>
</AuthorizeView>

@code {
    private HashSet<string> options { get; set; } = new HashSet<string>();
    private string[] Tipobusca = { "Nacional", "Internacional", "Multinacional", "Governo" };

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;

    private string searchString = string.Empty; // Usaremos apenas uma string de busca




    private EmpresaModel selectedItem1 = null;
    private IEnumerable<EmpresaModel> listaempresas = new List<EmpresaModel>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetEmpresa();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task<IEnumerable<EmpresaModel>> GetEmpresa()
    {
        listaempresas = await empresaService.GetRegistro();
        return listaempresas;
    }

    private bool Search(EmpresaModel empresa)
    {
        if (string.IsNullOrWhiteSpace(searchString) && options.Count == 0)
            return true;

        bool matchesSearchString = !string.IsNullOrWhiteSpace(searchString) &&
                               (empresa.RazaoSocial?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (empresa.NomeFantasia?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (empresa.CNPJ?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false);




        return matchesSearchString;
    }

    private void Pesquisar()
    {
        // Função que pode ser usada para alguma lógica adicional de pesquisa
        StateHasChanged();
    }

    private async Task NovoRegistro()
    {
        bool existeEmpresa = await empresaService.ExisteEmpresaCadastrada();

        if(existeEmpresa){
            mensagem.Add("Já existe um CONDOMÍNIO cadastrado! Favor entrar em contato com suporte", Severity.Warning);

        }else{
            Navigation.NavigateTo("/Cadastros/Empresas/Empresa");           
        }
       
    }
    private async Task Voltar()
    {
        Navigation.NavigateTo("/cadastros/cadastros/");
    }

    private void Editar(EmpresaModel empresa)
    {
        Navigation.NavigateTo($"/Cadastros/Empresas/Empresa/{empresa.Id}");
    }
    private async void Excluir(int id)
    {
        
        Pesquisar();
        mensagem.Add("SOMENTE O USUARIO MASTER TEM ACESSO A ESSA FUNÇÃO! - FAVOR ENTRAR EM CONTATO COM SUPORTE!", Severity.Warning);
    }
}

