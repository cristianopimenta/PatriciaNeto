@page "/financeiro/contaspagar/editarcontapagar"
@page "/financeiro/contaspagar/editarcontapagar/{id:int}"
@using web.Controller.Interface

@inject IContaPagar contaPagarService
@inject FornecedorService forncedorService
@inject IPlanoConta planoContaService
@inject ContaPagarService dcontaPagarService

@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<MudGrid style="position: relative;  padding: 15px;">
    <MudItem xs="12">
        <MudPaper Class="d-flex align-items-center justify-content-between"
                  Style="width: 100%; height: 100%; background-color: transparent; box-shadow: none;">
            <div class="d-flex align-items-center">
                <MudIcon Icon="@Icons.Material.Filled.Payment" Color="Color.Warning" Size="Size.Large" />
                <MudText Typo="Typo.h4" GutterBottom="true" Color="Color.Warning">@(_isEdit ? "Editar Conta a Pagar" : "Cadastro de Conta a Pagar")</MudText>
            </div>
        </MudPaper>
    </MudItem>
</MudGrid>
<MudDivider />
<br />

<MudPaper Elevation="3" Class="pa-4">
    <MudGrid>
        <!-- Campos do formulário -->
        <MudItem xs="12" md="6">
            <MudSelect T="int?" @bind-Value="contaPagar.PlanoContaId" Label="Plano Conta" Variant="Variant.Outlined" Required="true">
                @if (planocontas != null && planocontas.Any())
                {
                    @foreach (var planoconta in planocontas)
                    {
                        <MudSelectItem T="int?" Value="@(planoconta.Id)">
                            @planoconta.Descricao
                        </MudSelectItem>
                    }
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudSelect T="int?" @bind-Value="contaPagar.FornecedorId" Label="Nome Pessoa" Variant="Variant.Outlined" Required="true">
                @if (fornecedores != null && fornecedores.Any())
                {
                    @foreach (var fornecedor in fornecedores)
                    {
                        <MudSelectItem T="int?" Value="@(fornecedor.Id)">
                            @fornecedor.Nome
                        </MudSelectItem>
                    }
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudTextField @bind-Value="contaPagar.NumeroDocumento" Label="Número Documento" />
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudTextField @bind-Value="contaPagar.DescricaoDocumento" Label="Descrição Documento" />
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudNumericField @bind-Value="contaPagar.ValorPagamento" Label="Valor a Pagar" />
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudDatePicker @bind-Date="contaPagar.DataDocumento" Label="Data do Documento" />
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudDatePicker @bind-Date="contaPagar.DataVencimento" Label="Data de Vencimento" />
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudDatePicker @bind-Date="contaPagar.DataPagamento" Label="Data de Pagamento" />
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudNumericField @bind-Value="contaPagar.JurosMulta" Label="Juros/Multa" />
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudNumericField @bind-Value="contaPagar.JurosMora" Label="Juros de Mora" />
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudNumericField @bind-Value="contaPagar.Desconto" Label="Desconto" />
        </MudItem>
        <MudItem xs="12">
            <MudTextField @bind-Value="contaPagar.Observacoes" Label="Observações" Multiline="true" Rows="3" />
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudSelect @bind-Value="contaPagar.StatusConta" Label="Status" T="TipoLiquidacao">
                @foreach (var status in Enum.GetValues(typeof(TipoLiquidacao)).Cast<TipoLiquidacao>())
                {
                    <MudSelectItem Value="@status">@status.ToString()</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudSelect @bind-Value="contaPagar.CodigoMoeda" Label="Código da Moeda" T="Moeda">
                @foreach (var moeda in Enum.GetValues(typeof(Moeda)).Cast<Moeda>())
                {
                    <MudSelectItem Value="@moeda">@moeda.ToString()</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12">
            <MudButton OnClick="Salvar" Color="Color.Primary" Variant="Variant.Filled">Salvar</MudButton>
            <MudButton OnClick="Cancelar" Color="Color.Secondary" Variant="Variant.Text" Class="ml-2">Cancelar</MudButton>
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    [Parameter]
    public int Id { get; set; }

    private ContaPagarModel contaPagar = new ContaPagarModel
        {
            PlanoConta = new PlanoContaModel(),
            Fornecedor = new FornecedorModel()
        };

    private bool _isEdit;
    private string nomeUsuario;

    private List<PlanoContaModel> planocontas = new();
    private PlanoContaModel? planocontaSelecionado;

    private List<FornecedorModel> fornecedores = new();
    private FornecedorModel? fornecedorSelecionada;

   

    protected override async Task OnInitializedAsync()
    {
        fornecedores = await forncedorService.GetFornecedoresAsync();
        planocontas = await planoContaService.ObterPlanoContas();

        // Obter o estado de autenticação do usuário e salvar usuario logado no registro
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        nomeUsuario = user.Identity.Name;

        // Verifica se o ID é válido
        if (Id > 0)
        {
            contaPagar = await dcontaPagarService.ObterPlanoContaPorId(Id) ?? new ContaPagarModel();
            if (contaPagar.PlanoConta == null)
            {
                contaPagar.PlanoConta = new PlanoContaModel();
            }

            contaPagar.Fornecedor = contaPagar.Fornecedor ?? new FornecedorModel();
        }
        _isEdit = Id > 0;
    }

    private async Task Salvar()
    {
        contaPagar.usuarioId = nomeUsuario;

        if (_isEdit)
        {
            await contaPagarService.UpdateContaPagarAsync(contaPagar); // Atualiza a conta existente
        }
        else
        {
            await contaPagarService.AddContaPagarAsync(contaPagar); // Adiciona uma nova conta
        }
        Navigation.NavigateTo("/financeiro/contaspagar/lista"); // Volta para a página de consulta
    }

    private void Cancelar()
    {
        Navigation.NavigateTo("/financeiro/contaspagar/lista"); // Volta para a página de consulta
    }
}
